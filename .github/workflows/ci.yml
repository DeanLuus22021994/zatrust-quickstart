name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: "0 3 * * *" # nightly audit window (UTC)
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

# Baseline minimal; jobs override if they need write
permissions:
  contents: read
  checks: write
  pull-requests: write
  security-events: write
  issues: write
  actions: read

jobs:
  quality:
    name: Quality (Node ${{ matrix.node }})
    runs-on: ubuntu-latest
    timeout-minutes: 35
    strategy:
      fail-fast: false
      matrix:
        node: ["20.x", "22.x"]
    env:
      NEXT_TELEMETRY_DISABLED: 1
      PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
      CI: "true"
    permissions:
      contents: read
      checks: write
      pull-requests: write
      issues: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: npm

      - name: Display dependency versions
        run: node -v && npm -v

      - name: Cache Next.js
        uses: actions/cache@v4
        with:
          path: .next/cache
          key: ${{ runner.os }}-nextjs-${{ matrix.node }}-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ matrix.node }}-${{ hashFiles('**/package-lock.json') }}-
            ${{ runner.os }}-nextjs-${{ matrix.node }}-

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ matrix.node }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-${{ matrix.node }}-

      - name: Install dependencies (ci)
        run: npm ci --no-audit --no-fund

      - name: Doctor
        run: npm run doctor

      - name: Type check
        run: npm run typecheck

      - name: Lint
        run: npm run lint

      - name: Build
        run: npm run build

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps chromium

      - name: E2E Tests
        run: npm run test:e2e -- --reporter=line,github --timeout=45000
        env:
          CI: true
          PLAYWRIGHT_JUNIT_OUTPUT_NAME: test-results/results.xml

      - name: Upload Playwright report
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ matrix.node }}-${{ github.run_id }}
          path: playwright-report/
          if-no-files-found: ignore
          retention-days: 7

      - name: Upload test results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.node }}-${{ github.run_id }}
          path: test-results/
          if-no-files-found: ignore
          retention-days: 7

      - name: Bundle analysis and performance profiling
        run: |
          npm run analyze 2>&1 | tee bundle-analysis.txt || true
          npx next build --profile 2>&1 | tee build-profile.txt || true

      - name: Upload bundle analysis
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analysis-${{ matrix.node }}-${{ github.run_id }}
          path: |
            bundle-analysis.txt
            build-profile.txt
            .next/analyze/
          if-no-files-found: ignore
          retention-days: 7

      - name: Security audit (high+ vulnerabilities)
        run: |
          npm audit --audit-level=high --json > security-audit.json || true
          if [ -s security-audit.json ]; then
            echo "Security vulnerabilities found:"
            cat security-audit.json
          fi

      - name: Upload security audit
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-${{ matrix.node }}-${{ github.run_id }}
          path: security-audit.json
          if-no-files-found: ignore
          retention-days: 14

      - name: Create issue on failure
        if: failure() && github.event_name == 'push'
        uses: actions/github-script@v7
        with:
          script: |
            const ref = process.env.GITHUB_REF;
            const title = `CI Failure on ${ref}`;
            const body = [
              'Automated issue created due to CI failure.',
              `Ref: ${ref}`,
              'Investigate first failing job; ignore cascade errors.',
              'See .github/prompts/automation.prompt.yml for remediation.'
            ].join('\\n');
            const { data: issues } = await github.rest.issues.listForRepo({ ...context.repo, state:'open', labels:'ci-failure' });
            if (!issues.find(i=>i.title===title)) {
              await github.rest.issues.create({ ...context.repo, title, body, labels:['ci-failure','automation']});
            }

  dependency-review:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: critical

  nightly-audit:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node 20.x
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: npm
      - name: Install dependencies
        run: npm ci
      - name: Audit (moderate+)
        run: npm audit --audit-level=moderate || true
      - name: Outdated summary
        run: npm outdated || true
      - name: Upload lockfile
        uses: actions/upload-artifact@v4
        with:
          name: lockfile-nightly
          path: package-lock.json
          retention-days: 3

  summary:
    needs: [quality]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Matrix completion
        run: echo "Quality matrix completed."
