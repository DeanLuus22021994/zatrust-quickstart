name: Auto-merge Dependencies

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled, ready_for_review]
  workflow_dispatch:

# Least privilege at top-level; job will further restrict if needed.
permissions:
  contents: write # needed for auto-merge & branch updates
  pull-requests: write # finalize merges / enable auto-merge
  checks: read
  issues: write # comment on PR (issue API)
  # security-events not needed

concurrency:
  group: automerge-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

jobs:
  automerge:
    name: Auto-merge dependency PR
    if: >-
      github.event_name == 'pull_request' &&
      !github.event.pull_request.draft &&
      github.event.pull_request.base.ref == 'main' &&
      (contains(github.event.pull_request.labels.*.name, 'dependencies') ||
       contains(github.event.pull_request.labels.*.name, 'renovate')) &&
      (github.event.pull_request.user.login == 'dependabot[bot]' ||
       github.event.pull_request.user.login == 'renovate[bot]')
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Log metadata
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            core.info(`Evaluating dependency PR #${pr.number}`);
            core.info(`From: ${pr.user.login}  Head: ${pr.head.ref}  Base:${pr.base.ref}`);
            core.info(`Labels: ${(pr.labels||[]).map(l=>l.name).join(', ')}`);
      - name: Auto-merge minor/patch dependency PRs
        uses: fastify/github-action-merge-dependabot@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          merge-method: squash
          target: minor
          allow-merge-commit: false
          use-github-auto-merge: true
      - name: Comment merge status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            core.info(`Auto-merge evaluation complete for #${pr.number}`);
            if (!pr.merged) {
              const existing = await github.rest.issues.listComments({
                ...context.repo,
                issue_number: pr.number
              });
              if (!existing.data.find(c => c.body?.includes('Auto-merge workflow evaluated.'))) {
                await github.rest.issues.createComment({
                  ...context.repo,
                  issue_number: pr.number,
                  body: 'Auto-merge workflow evaluated. If conditions (minor/patch + labels) are satisfied, GitHub auto-merge will finalize once checks pass.'
                });
              }
            }
